const char *vertexShaderSourcePerspective =
        "#version 330 core\n"
                "layout (location = 0) in vec3 aPos;\n"
                "layout (location = 1) in vec2 aTexCoord;\n"
                "layout (location = 2) in vec3 aNormal;\n"
                "\n"
                "out vec3 FragPos;\n"
                "out vec3 Normal;\n"
                "out vec2 TexCoord;\n"
                "\n"
                "layout (std140) uniform shader_data\n"
                "{ \n"
                "    mat4 view_projection;\n"
                "    mat4 prev_view_projection;\n"
                "    mat4 projection;\n"
                "    mat4 view;\n"
                "    mat4 inverse_view;"
                "};"
                "uniform mat4 model;\n"
                "\n"
                "void main()\n"
                "{\n"
                "    FragPos = vec3(model * vec4(aPos, 1.0));\n"
                "    Normal = mat3(transpose(inverse(model))) * aNormal;  \n"
                "    \n"
                "    gl_Position = projection * view * vec4(FragPos, 1.0);\n"
                "    TexCoord = aTexCoord;\n"

                "}";
const char *fragmentShaderSourcePerspective =
        "#version 330 core\n"
        "out vec4 FragColor;\n"
        "\n"
        "in vec3 Normal;  \n"
        "in vec3 FragPos;  \n"
        "in vec2 TexCoord;  \n"
        "\n"
        "layout (std140) uniform shader_data\n"
        "{ \n"
        "    mat4 view_projection;\n"
        "    mat4 prev_view_projection;\n"
        "    mat4 projection;\n"
        "    mat4 view;\n"
        "    mat4 inverse_view;"
        "};"
        "  \n"
        "uniform vec3 lightPos; \n"
        "uniform vec3 viewPos; \n"
        "uniform vec3 lightColor;\n"
        "uniform vec3 objectColor;\n"
        "uniform sampler2D texture1;\n"
        "uniform sampler2D texture2;\n"
        "\n"
        "void main()\n"
        "{\n"
        "    // ambient\n"
        "    float ambientStrength = 0.1;\n"
        "    vec3 ambient = ambientStrength * lightColor;\n"
        "    \n"
        "    // diffuse \n"
        "    vec3 norm = normalize(Normal);\n"
        "    vec3 lightDir = normalize(lightPos - FragPos);\n"
        "    float diff = max(dot(norm, lightDir), 0.0);\n"
        "    vec3 diffuse = diff * lightColor;\n"
        "    \n"
        "    // specular\n"
        "    float specularStrength = 0.5;\n"
        "    vec3 viewDir = normalize(viewPos - FragPos);\n"
        "    vec3 reflectDir = reflect(-lightDir, norm);  \n"
        "    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);\n"
        "    vec3 specular = specularStrength * spec * lightColor;  \n"
        "        \n"
        "    vec3 result = (ambient + diffuse + specular) * objectColor;\n"
        "    FragColor = texture(texture2, TexCoord) * vec4(result, 1.0);\n"
        "} ";