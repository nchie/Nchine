const char *vertexDeferredPointShader =
        "#version 330 core\n"
        "\n"
        "layout (location = 0) in vec3 aPos;\n"
        "layout (location = 1) in vec2 aTexCoords;\n"
        "\n"
        "out vec3 EyeDirection;\n"
        "out vec2 TexCoords;\n"
        "\n"
        "layout (std140) uniform shader_data\n"
        "{ \n"
        "    mat4 view_projection;\n"
        "    mat4 prev_view_projection;\n"
        "    mat4 projection;\n"
        "    mat4 view;\n"
        "    mat4 inverse_view;\n"
        "    mat4 inverse_projection;\n"
        "    vec2 half_size_near_plane;\n"
        "};\n"
        "\n"
        "void main()\n"
        "{\n"
        "   TexCoords = aTexCoords;\n"
        "   EyeDirection = vec3((2.0 * half_size_near_plane * aTexCoords) - half_size_near_plane , -1.0);\n"
        "   gl_Position = vec4(aPos.xy, 0, 1);\n"
        "}";

const char *fragmentDeferredPointShader =
        "#version 330 core\n"
        "//Fragment shader\n"
        "layout (location = 0) out vec4 FragColor;\n"
        "in vec3 EyeDirection;\n"
        "in vec2 TexCoords;\n"
        "\n"
        "layout (std140) uniform shader_data\n"
        "{ \n"
        "    mat4 view_projection;\n"
        "    mat4 prev_view_projection;\n"
        "    mat4 projection;\n"
        "    mat4 view;\n"
        "    mat4 inverse_view;\n"
        "    mat4 inverse_projection;\n"
        "    vec2 half_size_near_plane;\n"
        "};\n"
        "\n"
        "uniform sampler2D gDiffuseSpecular;\n"
        "uniform sampler2D gNormal;\n"
        "uniform sampler2D gDepth;\n"
        "uniform vec3 viewPos;\n"
        "uniform vec3 lightPos;\n"
        "uniform vec3 lightColor;\n"
        "uniform float lightRadius;\n"
        "\n"
        "vec4 CalcViewPosFromWindow(in float windowZ, in vec3 eyeDirection, in mat4 projMatrix)\n"
        "{\n"
        "    float ndcZ = 2.0 * windowZ - 1;\n"
        "    float viewZ = -projMatrix[3][2] / ((projMatrix[2][3] * ndcZ) - projMatrix[2][2]);\n"
        "    return vec4(EyeDirection * viewZ, 1);\n"
        "}\n"
        "\n"
        "void main()\n"
        "{\n"
        "   vec4  viewPosition   = CalcViewPosFromWindow(texture(gDepth, TexCoords).x, EyeDirection, projection);\n"
        "   vec3  worldPosition  = (inverse_view*viewPosition).xyz;\n"
        "   vec4  worldNormal    = vec4(texture(gNormal, TexCoords).xyz, 0.0);\n"
        "   vec3  diffuse        = texture(gDiffuseSpecular, TexCoords).rgb;\n"
        "   float specular       = texture(gDiffuseSpecular, TexCoords).a;\n"

        "   \n"
        "   vec3 lightDir = normalize(lightPos - worldPosition);\n"
        "   vec3 viewDir = normalize(viewPos - worldPosition);\n"
        "   vec3 dif = max(dot(worldNormal.xyz, lightDir), 0.0) * diffuse * lightColor;\n"
        "   vec3 halfwayDir = normalize(lightDir + viewDir); \n"
        "   \n"
        "   float spec = pow(max(dot(worldNormal.xyz, halfwayDir), 0.0), 74.0);\n"
        "   vec3 spec2 = lightColor * spec * specular;\n"
        "   \n"
        "   float Linear = 0.7;\n" // Make uniform
        "   float Quadratic = 0.1;\n" // Make uniform
        "   float distance = length(lightPos - worldPosition);\n"
        "   float attenuation = 1.0 / (1.0 + Linear * distance + Quadratic * distance * distance);\n"
        "   \n"
        "   spec2 *= attenuation;\n"
        "   dif *= attenuation;\n"
        "   \n"
        "   vec3 lighting = dif + spec2;\n"
        "   FragColor = vec4(lighting, 1.0);\n"
        "}";

