const char *vertexGeometryShader =
        "#version 330 core\n"
                "layout (location = 0) in vec3 aPos;\n"
                "layout (location = 1) in vec2 aTexCoords;\n"
                "layout (location = 2) in vec3 aNormal;\n"
                "\n"
                "out vec3 FragPos;\n"
                "out vec3 Normal;\n"
                "out vec2 TexCoords;\n"
                "\n"
                "layout (std140) uniform shader_data\n"
                "{ \n"
                "    mat4 view_projection;\n"
                "    mat4 prev_view_projection;\n"
                "    mat4 projection;\n"
                "    mat4 view;\n"
                "    mat4 inverse_view;"
                "};"
                "uniform mat4 model;\n"
                "\n"
                "void main()\n"
                "{\n"
                "    vec4 worldPos = model * vec4(aPos, 1.0);\n"
                "    FragPos = worldPos.xyz; \n"
                "    TexCoords = aTexCoords;\n"
                "    \n"
                "    mat3 normalMatrix = transpose(inverse(mat3(model)));\n"
                "    Normal = normalMatrix * aNormal;\n"
                "   \n"
                "   gl_Position = projection * view * worldPos;"
                "}";

const char *fragmentGeometryShader =
        "#version 330 core\n"
                "layout (location = 0) out vec4 gAlbedo;\n"
                "layout (location = 1) out vec4 gNormal;\n"
                "layout (location = 2) out vec4 gSpecular;\n"
                "layout (location = 3) out vec4 gDiffuse;\n"
                "\n"
                "in vec3 Normal;  \n"
                "in vec3 FragPos;  \n"
                "in vec2 TexCoords;  \n"
                "\n"
                "layout (std140) uniform shader_data\n"
                "{ \n"
                "    mat4 view_projection;\n"
                "    mat4 prev_view_projection;\n"
                "    mat4 projection;\n"
                "    mat4 view;\n"
                "    mat4 inverse_view;"
                "};"

                "uniform sampler2D texture_diffuse1;\n"
                "uniform sampler2D texture_specular1;\n"
                "\n"
                "void main()\n"
                "{\n"
                "    // store the fragment position vector in the first gbuffer texture\n"
                "    //gPosition = vec4(FragPos, 0.0);\n"
                "    // also store the per-fragment normals into the gbuffer\n"
                "    gNormal = vec4(normalize(Normal), 0.0);\n"
                "    // and the diffuse per-fragment color\n"
                "    gAlbedo.rgb = texture(texture_diffuse1, TexCoords).rgb;\n"
                "    // store specular intensity in gAlbedoSpec's alpha component\n"
                "    gAlbedo.a = texture(texture_specular1, TexCoords).r;\n"
                "} ";



const char *vertexDeferredShader =
        "#version 330 core\n"
                "layout (location = 0) in vec3 aPos;\n"
                "layout (location = 1) in vec2 aTexCoords;\n"
                "\n"
                "out vec3 FragPos;\n"
                "out vec2 TexCoords;\n"
                "\n"
                "void main()\n"
                "{\n"
                "    FragPos = aPos; \n"
                "    TexCoords = aTexCoords;\n"
                "    gl_Position = vec4(aPos, 1.0);\n"
                "}";
const char *fragmentDeferredShader =
        "#version 330 core\n"
                "layout (location = 0) out vec3 FragColor;\n"
                "\n"
                "in vec3 FragPos;  \n"
                "in vec2 TexCoords;  \n"
                "\n"
                "layout (std140) uniform shader_data\n"
                "{ \n"
                "    mat4 view_projection;\n"
                "    mat4 prev_view_projection;\n"
                "    mat4 projection;\n"
                "    mat4 view;\n"
                "    mat4 inverse_view;\n"
                "    mat4 inverse_projection;\n"
                "};\n"
                "uniform sampler2D albedo;\n"
                "uniform sampler2D normal;\n"
                "uniform sampler2D depth;\n"
                "\n"
                "float near = 0.1; \n"
                "float far  = 100.0; \n"
                "\n"
                "float LinearizeDepth(float depth) \n"
                "{\n"
                "    float z = depth * 2.0 - 1.0; // back to NDC \n"
                "    return (2.0 * near * far) / (far + near - z * (far - near));\t\n"
                "}\n"
                "\n"
                "void main()\n"
                "{\n"
                "    // store the fragment position vector in the first gbuffer texture\n"
                "    //vec4 pos;\n"
                "    //pos.z = texture(depth, TexCoords).x * 2.0 - 1.0;\n"
                "    //pos.x = TexCoords.x * 2.0 - 1.0;\n"
                "    //pos.y = TexCoords.y * 2.0 - 1.0;\n"
                "    //pos.w = 1.0;\n"
                "    //pos   = (inverse_projection * pos);\n"
                "    //pos  /= pos.w;\n"
                "    float depth = texture(depth, TexCoords).x;"
                "    float z = depth * 2.0 - 1.0;\n"
                "    vec4 clipSpacePosition = vec4(TexCoords.x * 2.0 - 1.0, TexCoords.y * 2.0 - 1.0, z, 1.0);\n"
                "    vec4 viewSpacePosition = inverse_projection * clipSpacePosition;\n"
                "    viewSpacePosition /= viewSpacePosition.w;\n"
                "    vec4 worldSpacePosition = inverse_view * viewSpacePosition;\n"
                "    FragColor = worldSpacePosition.xyz; \n"
                "    //FragColor = vec3(vec4(x, y, z, 1.0) * inverse_projection);\n"
                "    //FragColor = vec3(LinearizeDepth(texture(depth, TexCoords).x)/far); \n"
                "} ";